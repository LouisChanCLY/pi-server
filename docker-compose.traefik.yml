version: "3.9"

networks:
  default:
    driver: bridge
  traefik_proxy:
    name: traefik_proxy
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.90.0/24

# ================ #
# EXTENSION FIELDS #
# ================ #
# Helps eliminate repetition of sections
# More Info on how to use this: https://github.com/htpcBeginner/docker-traefik/pull/228
 
# Common environment values
x-environment: &default-tz-puid-pgid
  TZ: $TZ
  PUID: $PUID
  PGID: $PGID
 
# Keys common to some of the core services that we always to automatically restart on failure
x-common-keys-core: &common-keys-core
  networks:
    - traefik_proxy
  security_opt:
    - no-new-privileges:true
  restart: always
 
# Keys common to some of the dependent services/apps
x-common-keys-apps: &common-keys-apps
  networks:
    - traefik_proxy
  security_opt:
    - no-new-privileges:true
  restart: unless-stopped
 
# Keys common to some of the services in media-services.txt
x-common-keys-media: &common-keys-media
  networks:
    - traefik_proxy
  security_opt:
    - no-new-privileges:true
  restart: "no"

services:
  whoami:
    <<: *common-keys-core
    image: "traefik/whoami"
    container_name: whoami
    networks:
      traefik_proxy:
        ipv4_address: 192.168.90.12 # You can specify a static IP
    labels:
      - 'traefik.enable=true'
      - "traefik.http.routers.whoami.rule=Host(`whoami.$DOMAINNAME_CLOUD_SERVER`)"
      - "traefik.http.routers.whoami.entrypoints=https"
      - "traefik.http.routers.whoami.tls.certresolver=dns-cloudflare"
      - 'traefik.http.services.whoami.loadbalancer.server.port=80'
  traefik:
    <<: *common-keys-core
    image: traefik:2.8.5
    container_name: traefik
    networks:
      traefik_proxy:
        ipv4_address: 192.168.90.11 # You can specify a static IP
    command:
      - --configFile=/traefik/traefik.toml
      - --entrypoints.https.http.tls.domains[0].main=$DOMAINNAME_CLOUD_SERVER
      - --entrypoints.https.http.tls.domains[0].sans=*.$DOMAINNAME_CLOUD_SERVER
    environment:
      - TZ=$TZ
      - DOMAINNAME_CLOUD_SERVER=$DOMAINNAME_CLOUD_SERVER
      - CLOUDFLARE_EMAIL=$CF_API_EMAIL
      - CLOUDFLARE_DNS_API_TOKEN=$CF_API_KEY
    security_opt:
      - no-new-privileges:true
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_config:/traefik
    labels:
      - "traefik.enable=true"
      ## HTTP-to-HTTPS Redirect
      - "traefik.http.routers.http-catchall.entrypoints=http"
      - "traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      ## HTTP Routers
      - "traefik.http.routers.traefik-rtr.entrypoints=https"
      - "traefik.http.routers.traefik-rtr.rule=Host(`traefik.$DOMAINNAME_CLOUD_SERVER`)"
      - "traefik.http.routers.traefik-rtr.tls=true"
      # - "traefik.http.routers.traefik-rtr.tls.certresolver=dns-cloudflare" # Optionally comment out this line after first run of traefik to force the use of wildcard certs
      - "traefik.http.routers.traefik-rtr.tls.domains[0].main=$DOMAINNAME_CLOUD_SERVER"
      - "traefik.http.routers.traefik-rtr.tls.domains[0].sans=*.$DOMAINNAME_CLOUD_SERVER"
      ## Services - API
      - "traefik.http.routers.traefik-rtr.service=api@internal"
      ## Middlewares
      - "traefik.http.routers.traefik-rtr.middlewares=middlewares-basic-auth@file"

volumes:
  traefik_config:
    driver_opts:
      type: 'none'
      o: 'bind'
      device: $TRAEFIK_DIR
